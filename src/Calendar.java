import java.awt.Color;
import java.io.IOException;
import java.net.InetAddress;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import org.apache.xmlrpc.XmlRpcException;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;

import org.apache.xmlrpc.common.TypeConverterFactoryImpl;
import org.apache.xmlrpc.server.PropertyHandlerMapping;
import org.apache.xmlrpc.server.XmlRpcServer;
import org.apache.xmlrpc.server.XmlRpcServerConfigImpl;
import org.apache.xmlrpc.webserver.WebServer;

public class Calendar extends javax.swing.JFrame{

    private WebServer webServer;
    XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
    XmlRpcClient client = new XmlRpcClient();

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    Statement stmt = null;
    
    private String myAddress = "http://127.0.0.1:8000/";
    private String serverAddress = "http://127.0.0.1:8001/";
    private String serverAddressXMLRPC;
    private String myIP;
    private String serverIP;
    private int myPort = 8000;
    private int serverPort = 8001;
    private ArrayList<String> addressList;    
    private boolean signedIn = false;
    private int max_id = 0;  
    private int MAX_ROWS = 1000;
    /**
     * Creates new form Calendar
     * @throws java.io.IOException
     */
    public Calendar() {
        initComponents();
    }
    public Calendar(String myAdd,String srvAdd) {
        initComponents();
        setAddress(myAdd,srvAdd);        

        this.addressList = new ArrayList<String>();
        addressList.add(myAddress);
        this.setSignedInStatus(false);
        
        conn = sqlConnect.connectDB();    
        initTableData();
        updateTable();
        
        try {
            initServer(); // initialize XmlRPC server
        } catch (IOException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jlbStatus = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jlbNumComp = new javax.swing.JLabel();
        jbtSignIn = new javax.swing.JButton();
        jlbMyIP = new javax.swing.JLabel();
        jlbSrvIP = new javax.swing.JLabel();
        jlbMyPort = new javax.swing.JLabel();
        jlbSrvPort = new javax.swing.JLabel();
        jbtSignOut = new javax.swing.JButton();
        jbtSetServer = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbData = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtfID = new javax.swing.JTextField();
        jtfDate = new javax.swing.JTextField();
        jtfTime = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jtfDuration = new javax.swing.JTextField();
        jtfHeader = new javax.swing.JTextField();
        jtfComment = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jbtAdd = new javax.swing.JButton();
        jbtEdit = new javax.swing.JButton();
        jbtDel = new javax.swing.JButton();
        jbtClear = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlsAddList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                customExit(evt);
            }
        });

        jlbStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlbStatus.setText("Offline");

        jLabel2.setText("Number of Comp:");

        jlbNumComp.setText("-");

        jbtSignIn.setText("Sign In");
        jbtSignIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSignInActionPerformed(evt);
            }
        });

        jlbMyIP.setText("-");

        jlbSrvIP.setText("-");

        jlbMyPort.setText("-");

        jlbSrvPort.setText("-");

        jbtSignOut.setText("Sign Out");
        jbtSignOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSignOutActionPerformed(evt);
            }
        });

        jbtSetServer.setText("Set Connect IP");
        jbtSetServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSetServerActionPerformed(evt);
            }
        });

        jLabel3.setText("host IP:");

        jLabel4.setText("connect IP:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jlbNumComp, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jlbStatus)
                            .addComponent(jbtSetServer)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbtSignIn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtSignOut)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jlbMyIP, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(jlbSrvIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbMyPort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlbSrvPort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlbStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jlbNumComp))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtSignIn)
                    .addComponent(jbtSignOut))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbMyIP)
                    .addComponent(jlbMyPort)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jlbSrvIP)
                    .addComponent(jlbSrvPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtSetServer)
                .addGap(136, 136, 136))
        );

        jtbData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Date", "Time", "Duration", "Header", "Comment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtbData);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Add / Edit / Delete"));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ID");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Date");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Time");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Duration");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Header");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Comment");

        jbtAdd.setText("Add");
        jbtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddActionPerformed(evt);
            }
        });

        jbtEdit.setText("Edit");
        jbtEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtEditActionPerformed(evt);
            }
        });

        jbtDel.setText("Delete");
        jbtDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDelActionPerformed(evt);
            }
        });

        jbtClear.setText("Clear");
        jbtClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtAdd)
                    .addComponent(jbtEdit)
                    .addComponent(jbtDel)
                    .addComponent(jbtClear))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbtAdd, jbtClear, jbtDel, jbtEdit});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jbtAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtDel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtClear)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jtfTime)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jtfComment, jtfDate, jtfDuration, jtfHeader, jtfID, jtfTime});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel5, jLabel6});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel7, jLabel8, jLabel9});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jtfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jtfTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel10.setText("List of hosts in Network");

        jScrollPane1.setViewportView(jlsAddList);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtSignInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSignInActionPerformed
        
        Object[] ret = null;
        Object[] tbl = null;
        boolean oneComp = false;
        if(serverAddress.length() < 1 || myAddress.equalsIgnoreCase(serverAddress)){
            Object[] a = new Object[]{new String(myAddress)};
            updateAddressList(a); // update list of hosts in display
            oneComp = true;
        }
        else
        try {	    
	    config.setServerURL(new URL(serverAddress));	    
	    client.setConfig(config);
            
            Object[] params = new Object[]{new String(myAddress)};
            // get address list of hosts in the network
            ret = (Object[]) client.execute("handler1.getAddressList", params);
            // get database from the network
            tbl = (Object[]) client.execute("handler1.getTableData", params);

            updateAddressList(ret); // update list of hosts in display            
            updateTableFromNetwork(tbl); // update appointments in table           
            
            // sign in to each host on the network
            for(String s:addressList){
                if(s.equalsIgnoreCase(myAddress))
                    continue;
                config.setServerURL(new URL(s)); 
                client.setConfig(config);
                params = new Object[]{new String(myAddress)};
                int retval = (Integer) client.execute("handler1.signInClient", params);
            }            
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        }

        if(ret == null && oneComp == false){
            JOptionPane.showMessageDialog(null, "Server not found.", "Login Error", JOptionPane.ERROR_MESSAGE);
            return;
        }        
        
        this.setSignedInStatus(true);
        try {
            startServer(); // start listening for connections
        } catch (IOException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_jbtSignInActionPerformed
    // Signs out host from the network
    public void signMeOut(){
        if(addressList.size() == 1){ //only current host is online
            updateAddressList(null);
            this.setSignedInStatus(false);
        }   
        else
        try {
            Object[] params = new Object[]{new String(myAddress)};
            for(String s:addressList){
                if(s.equalsIgnoreCase(myAddress))
                    continue;                
                config.setServerURL(new URL(s)); 
                client.setConfig(config);                
                int retval = (Integer) client.execute("handler1.signOutClient", params);
            }
            addressList.clear();
            addressList.add(myAddress);
            updateAddressList(null); // update list of hosts in display   
            this.setSignedInStatus(false);                        
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        }              
    }
    private void jbtSignOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSignOutActionPerformed
        signMeOut();
        try {
            stopServer(); // Stop the XmlRPC server
        } catch (IOException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbtSignOutActionPerformed

    // sets the IP addrees of the host to initially connect to
    // this is provided by 2nd command line argument
    // this button gives option to change it while program is running
    private void jbtSetServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSetServerActionPerformed
        String disp = "";
        if(serverAddress.length() > 10){ // no proper check if IP is valid
            disp = serverIP+":"+serverPort;
        }
        else disp = myIP+":"+myPort;
        String input =  JOptionPane.showInputDialog(this 
               ,"Enter new Server Address:",disp);
        if(input != null) {
            if(input.equals(myIP+":"+myPort))                
                JOptionPane.showMessageDialog(null, "Server IP cannot be own IP.", "IP Error", JOptionPane.ERROR_MESSAGE);
            else
                this.setAddress(myIP+":"+myPort, input);
        }
    }//GEN-LAST:event_jbtSetServerActionPerformed

    // Signs out client when window title bar 'X' button is clicked
    private void customExit(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_customExit
        signMeOut();        
        System.exit(0);      
    }//GEN-LAST:event_customExit

    private void jbtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddActionPerformed
        if(this.jtfID.getText().length()>0) {
            JOptionPane.showMessageDialog(null, "ID field must be empty when adding.",
                        "Add Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String date = this.jtfDate.getText();
        String time = this.jtfTime.getText();
        String duration = this.jtfDuration.getText();
        String header = this.jtfHeader.getText();
        String comment = this.jtfComment.getText();        
        max_id = addRow(date,time,duration,header,comment);  // add row to local database
        updateTable(); // update display
        sendAddRow(max_id,date,time,duration,header,comment); // send added row to other hosts
    }//GEN-LAST:event_jbtAddActionPerformed

    private void jbtDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDelActionPerformed
        String st = this.jtfID.getText();        
        if(st.length()<1){
            JOptionPane.showMessageDialog(null, "ID must be given.",
                        "Delete Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(!st.matches("\\d*\\.?\\d+")) return;
        int id = Integer.parseInt(st);
        delRowLocal(id); // delete a row from local database
        updateTable(); // update display
        sendDelRowClient(id); // send id to other host for delete 
        this.jtfID.setText("");
    }//GEN-LAST:event_jbtDelActionPerformed

    private void jbtClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtClearActionPerformed
        this.jtfID.setText("");
        this.jtfDate.setText("");        
        this.jtfTime.setText("");
        this.jtfDuration.setText("");        
        this.jtfHeader.setText("");
        this.jtfComment.setText("");     
    }//GEN-LAST:event_jbtClearActionPerformed

    private void jbtEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtEditActionPerformed
        String st = this.jtfID.getText();
        if(st.length()<1){
            JOptionPane.showMessageDialog(null, "ID must be given.",
                        "Edit Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(!st.matches("\\d*\\.?\\d+")) return;

        int id = Integer.parseInt(st);
        String date = this.jtfDate.getText();
        String time = this.jtfTime.getText();
        String duration = this.jtfDuration.getText();
        String header = this.jtfHeader.getText();
        String comment = this.jtfComment.getText();    
        
        this.editMyTable(id,date,time,duration,header,comment); // edit table in local host
        sendEditClient(id,date,time,duration,header,comment); // edit table in other hosts
    }//GEN-LAST:event_jbtEditActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new Calendar().setVisible(true);

                }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtAdd;
    private javax.swing.JButton jbtClear;
    private javax.swing.JButton jbtDel;
    private javax.swing.JButton jbtEdit;
    private javax.swing.JButton jbtSetServer;
    private javax.swing.JButton jbtSignIn;
    private javax.swing.JButton jbtSignOut;
    private javax.swing.JLabel jlbMyIP;
    private javax.swing.JLabel jlbMyPort;
    private javax.swing.JLabel jlbNumComp;
    private javax.swing.JLabel jlbSrvIP;
    private javax.swing.JLabel jlbSrvPort;
    private javax.swing.JLabel jlbStatus;
    private javax.swing.JList jlsAddList;
    private javax.swing.JTable jtbData;
    private javax.swing.JTextField jtfComment;
    private javax.swing.JTextField jtfDate;
    private javax.swing.JTextField jtfDuration;
    private javax.swing.JTextField jtfHeader;
    private javax.swing.JTextField jtfID;
    private javax.swing.JTextField jtfTime;
    // End of variables declaration//GEN-END:variables

    public void setSignedInStatus(boolean status){
        signedIn = status;
        this.jbtSignIn.setEnabled(!status);
        this.jbtSignOut.setEnabled(status);
        this.jbtAdd.setEnabled(status);
        this.jbtEdit.setEnabled(status);
        this.jbtDel.setEnabled(status);        
        if(status == true){
            this.jlbStatus.setForeground(Color.BLUE);
            this.jlbStatus.setText("Online");
        }
        else {
            this.jlbStatus.setForeground(Color.black);
            this.jlbStatus.setText("Offline");
        }      
    } 
    // parse the addresses received from command line to IP and port
    private void setAddress(String myAdd, String srvAdd){
        String myA = myAdd.split("\\:")[0];
        String myP = myAdd.split("\\:")[1];
        String srvA;
        String srvP;
        if(srvAdd.length() >10){
            srvA = srvAdd.split("\\:")[0];
            srvP = srvAdd.split("\\:")[1];
        }
        else{
            srvA = "";
            srvP = "";            
        }

        this.myAddress = "http://" + myAdd + "/";
        this.myIP = myA;
        this.myPort = Integer.parseInt(myP);
        if(srvAdd.length() > 10){
            this.serverAddress = "http://" + srvAdd + "/";
            this.serverIP = srvA;
            this.serverPort = Integer.parseInt(srvP); 
        }
        else {
            this.serverAddress = "";
            this.serverIP = "";
            this.serverPort = 0;             
        }
            
        this.jlbMyIP.setText(myIP);
        this.jlbMyPort.setText(""+myPort);
        if(srvAdd.length() > 10){
            this.jlbSrvIP.setText(serverIP);
            this.jlbSrvPort.setText(""+serverPort);
            this.serverAddressXMLRPC = serverAddress + "xmlrpc";
        }
        else {
            this.jlbSrvIP.setText("        -");
            this.jlbSrvPort.setText("    -");
            this.serverAddressXMLRPC = "";            
        }
    }
    // initialize XmlRPC server
    private void initServer() throws IOException{
        webServer = new WebServer(myPort,InetAddress.getByName(myIP));
        XmlRpcServer xmlRpcServer = webServer.getXmlRpcServer();
        PropertyHandlerMapping phm = new PropertyHandlerMapping();
        try {
            phm.addHandler("handler1",XMLMethods.class);
        } catch (XmlRpcException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }

        xmlRpcServer.setHandlerMapping(phm);

        XmlRpcServerConfigImpl serverConfig =
            (XmlRpcServerConfigImpl) xmlRpcServer.getConfig();
        serverConfig.setEnabledForExtensions(true);
        serverConfig.setContentLengthOptional(false);        
    }
    // start XmlRPC server
    private void startServer() throws IOException {
        webServer.start();
        //System.out.println("server started on port " + myPort + "...");
    }
    // stop XmlRPC server
    private void stopServer() throws IOException {
        webServer.shutdown();
        //System.out.println("server stopped on port " + myPort + "...");
    }    
    // return address of hosts in network
    public String[] getAddressList(String address) {
        String[] tempList = new String[addressList.size()];
        int i = 0;
        for(String s: addressList){
            tempList[i++] = s;
        }
        return tempList;
    } 
    // update lists of hosts in display
    public void updateAddressList(Object[] obj){

        if(obj == null){
            this.jlsAddList.setListData(new String[0]);        
            this.jlbNumComp.setText("-");            
            return;
        }

        for(Object o:obj){
            String addr = o.toString();
            if(!addressList.contains(addr)){
                addressList.add(addr);                   
            }                                
        }
        String[] tempList = new String[addressList.size()];
        int i = 0;
        for(String s:addressList)
            tempList[i++] = s;

        this.jlsAddList.setListData(tempList); // update display of listbox        
        this.jlbNumComp.setText(""+addressList.size());
    }
    // add a client IP to list of hosts when the client signs in to network
    public int signInClient(String address) {
        if(!addressList.contains(address)){
            addressList.add(address);
            this.jlbNumComp.setText(""+addressList.size());
        }

        String[] tempList = new String[addressList.size()];
        int i = 0;
        for(String s:addressList)
            tempList[i++] = s;     
        this.jlsAddList.setListData(tempList); // update display of listbox        
        return 0;
    }
    // remove a client IP from the list of hosts when the client signs out from network
    public int signOutClient(String address) {
        if(addressList.contains(address)){
            addressList.remove(address);
            this.jlbNumComp.setText(""+addressList.size());
        }

        String[] tempList = new String[addressList.size()];
        int i = 0;
        for(String s:addressList)
            tempList[i++] = s;     
        this.jlsAddList.setListData(tempList); // update display of listbox         
        return 0;
    }
    // initialize JTable
    private void initTableData() {
        DefaultTableModel model = (DefaultTableModel) jtbData.getModel();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        jtbData.setDefaultRenderer(Integer.class, centerRenderer); 
        jtbData.setDefaultRenderer(String.class, centerRenderer);        
    }
    // update table display from database
    public void updateTable(){
        try {
            String sql = "select * from CalendarData";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            jtbData.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // add row to local database, returns the id generated
    public int addRow(String date, String time, String duration, String header, String comment) {
        try {
            conn.setAutoCommit(false);
            String sql = "INSERT INTO CalendarData (date,time,duration,header,comment)"
                    + " VALUES ('" + date + "', '" + time + "', '"
                    + duration + "', '" + header + "','" + comment + "' )";
            stmt = conn.createStatement();
            stmt.executeUpdate(sql);      
            sql = "SELECT COALESCE(MAX(id), 0) FROM CalendarData";
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            max_id = ((Number) rs.getObject(1)).intValue();
            stmt.close();
            conn.commit();
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }          
        return max_id;
    }    
    // add row received from client(with id) to local database
    public void addRowClient(int id,String date,String time, String duration,String header,String comment){
        try {
            conn.setAutoCommit(false);
            String sql = "INSERT INTO CalendarData (id,date,time,duration,header,comment)"
                    + " VALUES ('" + id + "', '" + date + "', '" + time + "', '"
                    + duration + "', '" + header + "','" + comment + "' )";
            stmt = conn.createStatement();
            stmt.executeUpdate(sql);           
            stmt.close();
            conn.commit();
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }                
    }
    // send a row to other hosts in network
    public void sendAddRow(int id, String date, String time, String duration, String header, String comment) {
       
        Object[] params = null;
        params = new Object[]{new Integer(id),new String(date),new String(time),
                    new String(duration),new String(header),new String(comment)};
        try {           
            for(String s:addressList){
                if(s.equalsIgnoreCase(myAddress))
                    continue;
                config.setServerURL(new URL(s)); 
                client.setConfig(config);                
                int retval = (Integer) client.execute("handler1.addRowClient", params);
            }
            
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        }      
    }   
    // returns all data in table. (two dimensional array didn't seem to work)
    public String[] getTableData() {
        int id = 0;
        String date = null;
        String time = null;
        String duration = null;
        String header = null;
        String comment = null; 

        String[] params = null;
        
        try {         
            String sql = "select * from CalendarData";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
   
            String[][] dat = new String[MAX_ROWS][6];
            int count = 0;
            while(rs.next()){
                id = Integer.parseInt(rs.getObject(1).toString());
                date = rs.getObject(2).toString();
                time = rs.getObject(3).toString();
                duration = rs.getObject(4).toString();
                header = rs.getObject(5).toString();
                comment = rs.getObject(6).toString();
                dat[count][0] = ""+id;
                dat[count][1] = date;
                dat[count][2] = time;
                dat[count][3] = duration;
                dat[count][4] = header;
                dat[count][5] = comment;
                count++;
            } 
            
            params = new String[count*6];
            for(int i = 0; i < count; i++){
                for(int j = 0; j < 6; j++){
                    params[i*6+j] = dat[i][j];
                }                
            }
            return params;
        
        }catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }  
        return null;   
    } 
    // edits the fields which are not empty.(very quick copy/paste. this should be improved to one sql statement)
    public void editMyTable(int id, String date, String time, String duration, String header, String comment) {
        try {
            if(date.length()>0){
                conn.setAutoCommit(false);
                String sql = "UPDATE CalendarData SET date = '" + date + "' WHERE ID = " + id;
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);      
                //rs = stmt.executeQuery(sql);
                stmt.close();
                conn.commit();
            }
            if(time.length()>0){
                conn.setAutoCommit(false);
                String sql = "UPDATE CalendarData SET time = '" + time + "' WHERE ID = " + id;
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);      
                //rs = stmt.executeQuery(sql);
                stmt.close();
                conn.commit();
            }
            if(duration.length()>0){
                conn.setAutoCommit(false);
                String sql = "UPDATE CalendarData SET duration = '" + duration + "' WHERE ID = " + id;
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);      
                //rs = stmt.executeQuery(sql);
                stmt.close();
                conn.commit();
            }
            if(header.length()>0){
                conn.setAutoCommit(false);
                String sql = "UPDATE CalendarData SET header = '" + header + "' WHERE ID = " + id;
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);      
                //rs = stmt.executeQuery(sql);
                stmt.close();
                conn.commit();
            }  
            if(comment.length()>0){
                conn.setAutoCommit(false);
                String sql = "UPDATE CalendarData SET comment = '" + comment + "' WHERE ID = " + id;
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);      
                //rs = stmt.executeQuery(sql);
                stmt.close();
                conn.commit();
            }             
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateTable(); // update display
    }    
    // update table data with network table data when signing in.
    // multiple row add not working with Java sqlite, have to add row by row
    private void updateTableFromNetwork(Object[] tbl) {
        int id;
        String date,time,duration,header,comment;
        deleteAllRow(); // delete all row from table
        String p = "";
        for(int i = 0; i < tbl.length/6; i++){
            id = Integer.parseInt(tbl[i*6].toString());
            date = tbl[i*6+1].toString();
            time = tbl[i*6+2].toString();
            duration = tbl[i*6+3].toString();
            header = tbl[i*6+4].toString();
            comment = tbl[i*6+5].toString();
            this.addRowClient(id, date, time, duration, header, comment);
        }
        updateTable(); // update display   
    }
    // delete all row from table
    public void deleteAllRow() {
        try {
            conn.setAutoCommit(false);
            String sql = "DELETE FROM " + "CalendarData";
            stmt = conn.createStatement();
            stmt.executeUpdate(sql);      
            conn.commit();
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }          
    }   
    // delete a single row from table
    public void delRowLocal(int id) {
        try {
            conn.setAutoCommit(false);
            String sql = "DELETE FROM CalendarData WHERE ID = " + id;
            stmt = conn.createStatement();
            stmt.executeUpdate(sql);      
            stmt.close();
            conn.commit();
        } catch (SQLException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // send row id to delete to other hosts in network
    public void sendDelRowClient(int id) {
        Object[] params = null;
        params = new Object[]{new Integer(id)};
        try {           
            for(String s:addressList){
                if(s.equalsIgnoreCase(myAddress))
                    continue;
                config.setServerURL(new URL(s)); 
                client.setConfig(config);                
                int retval = (Integer) client.execute("handler1.delRowClient", params);
            }            
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        }            
    }
    // send row to edit to other hosts in network
    public void sendEditClient(int id, String date, String time, String duration, String header, String comment){
        Object[] params = null;
        params = new Object[]{new Integer(id),new String(date),new String(time),
                    new String(duration),new String(header),new String(comment)};
        try {
            for(String s:addressList){
                if(s.equalsIgnoreCase(myAddress))
                    continue;
                config.setServerURL(new URL(s)); 
                client.setConfig(config);                
                int retval = (Integer) client.execute("handler1.editRowClient", params);
            }            
        } catch (Exception exception) {
          System.err.println("JavaServer: " + exception);
        }    
    }
}
